#!/bin/sh

TMPFILEBASE=$(basename "$0")
ERRORS=0

checkeq() {
    if [ "$1" != "$2" ]
    then
      echo "Expected '$2', got '$1'"
      ERRORS=$((ERRORS + 1))
    fi
}

echo "uuniq <stdin> <stdout>"
TEST="$(./uuniq /dev/null)"
checkeq $? 0
EXPECTED=""
checkeq "$TEST" "$EXPECTED"

TEST="$(./uuniq <<ENDS
Hello
world!
ENDS
)"
checkeq $? 0
EXPECTED="Hello
world!"
checkeq "$TEST" "$EXPECTED"

TEST="$(./uuniq <<ENDS
Hello
Hello
ENDS
)"
checkeq $? 0
EXPECTED="Hello"
checkeq "$TEST" "$EXPECTED"

TEST="$(./uuniq <<ENDS
Hello
Hello
Hello
ENDS
)"
checkeq $? 0
EXPECTED="Hello"
checkeq "$TEST" "$EXPECTED"

TEST="$(./uuniq <<ENDS
Hello
world!
Hello
ENDS
)"
checkeq $? 0
EXPECTED="Hello
world!"
checkeq "$TEST" "$EXPECTED"

# - as input file means standard input
TEST="$(./uuniq <<ENDS -
Hello
world!
Hello
ENDS
)"
checkeq $? 0
EXPECTED="Hello
world!"
checkeq "$TEST" "$EXPECTED"

# - as output file means standard output
TEST="$(./uuniq <<ENDS - -
Hello
world!
Hello
ENDS
)"
checkeq $? 0
EXPECTED="Hello
world!"
checkeq "$TEST" "$EXPECTED"

TEST="$(./uuniq <<ENDS
Hello
world!
Hello
world!
ENDS
)"
checkeq $? 0
EXPECTED="Hello
world!"
checkeq "$TEST" "$EXPECTED"

TMPIN=$(mktemp /tmp/"${TMPFILEBASE}-in.XXXXXX")

echo "uuniq [inputfile] <stdout>"
cat <<ENDS > "$TMPIN"
Hello
world!
Hello
ENDS
TEST=$(./uuniq "$TMPIN")
checkeq $? 0
EXPECTED="Hello
world!"
checkeq "$TEST" "$EXPECTED"
rm "$TMPIN"

echo "uuniq [inputfile] [outputfile]"
TMPOUT=$(mktemp /tmp/"${TMPFILEBASE}-out.XXXXXX")

cat <<ENDS > "$TMPIN"
Hello
world!
Hello
ENDS
./uuniq "$TMPIN" "$TMPOUT"
checkeq $? 0
TEST=$(cat "$TMPOUT")
EXPECTED="Hello
world!"
checkeq "$TEST" "$EXPECTED"
rm "$TMPIN"
rm "$TMPOUT"

# Check uuniq overwrites output file
echo "Not the expected output" > "$TMPOUT"
./uuniq <<ENDS - "$TMPOUT"
Expected output
ENDS
checkeq $? 0
TEST=$(cat "$TMPOUT")
EXPECTED="Expected output"
checkeq "$TEST" "$EXPECTED"
rm "$TMPOUT"

echo "uuniq -d"
TEST="$(./uuniq <<ENDS -d
Hello
world!
Hello
Hello
ENDS
)"
checkeq $? 0
EXPECTED="Hello"
checkeq "$TEST" "$EXPECTED"

echo "uuniq -u"
TEST="$(./uuniq <<ENDS -u
Hello
world!
Hello
Hello
ENDS
)"
checkeq $? 0
EXPECTED="world!"
checkeq "$TEST" "$EXPECTED"

echo "uuniq -d -u output should be empty"
TEST=$(./uuniq -d -u /dev/null)
checkeq $? 0
EXPECTED=""
checkeq "$TEST" "$EXPECTED"

TEST=$(./uuniq -u -d /dev/null)
checkeq $? 0
checkeq "$TEST" "$EXPECTED"

TEST="$(./uuniq <<ENDS -d -u
Hello
world!
Hello
Hello
ENDS
)"
checkeq $? 0
checkeq "$TEST" "$EXPECTED"

TEST="$(./uuniq <<ENDS -u -d
Hello
world!
Hello
Hello
ENDS
)"
checkeq $? 0
checkeq "$TEST" "$EXPECTED"

echo "uuniq -h"
TEST=$(./uuniq -h)
checkeq $? 0
TEST=$(echo "$TEST" | grep "Usage:")
EXPECTED="Usage: uuniq [options] [INPATH [OUTPATH]]"
checkeq "$TEST" "$EXPECTED"

echo "uuniq -v"
TEST=$(./uuniq -v)
checkeq $? 0
TEST=$(echo "$TEST" | sed -E 's/uuniq ([0-9]{4}-[0-9]{2}-[0-9]{2})/uuniq YYYY-MM-DD/')
EXPECTED="uuniq YYYY-MM-DD"
checkeq "$TEST" "$EXPECTED"

echo "uuniq <unknown option>"
TEST=$(./uuniq -xyz 2>&1)
checkeq $? 1
TEST=$(echo "$TEST" | grep "Usage:")
EXPECTED="Usage: uuniq [options] [INPATH [OUTPATH]]"
checkeq "$TEST" "$EXPECTED"

TMPOUT_UUNIQ=$(mktemp /tmp/"${TMPFILEBASE}-out-uuniq.XXXXXX")
TMPOUT_UNIQ=$(mktemp /tmp/"${TMPFILEBASE}-out-uniq.XXXXXX")

echo "compare 'uuniq | sort' output to 'sort | uniq'"
for input in uuniq.c Makefile "$0"; do
  ./uuniq "$input" | sort > "$TMPOUT_UUNIQ"
  sort "$input" | uniq > "$TMPOUT_UNIQ"
  cmp "$TMPOUT_UUNIQ" "$TMPOUT_UNIQ"
  checkeq $? 0
  rm "$TMPOUT_UUNIQ" "$TMPOUT_UNIQ"
done

echo "compare 'uuniq -d | sort' output to 'sort | uniq -d'"
for input in /dev/null uuniq.c Makefile "$0"; do
  ./uuniq -d "$input" | sort > "$TMPOUT_UUNIQ"
  sort "$input" | uniq -d > "$TMPOUT_UNIQ"
  cmp "$TMPOUT_UUNIQ" "$TMPOUT_UNIQ"
  checkeq $? 0
  rm "$TMPOUT_UUNIQ" "$TMPOUT_UNIQ"
done

echo "compare 'uuniq -u | sort' output to 'sort | uniq -u'"
for input in /dev/null uuniq.c Makefile "$0"; do
  ./uuniq -u "$input" | sort > "$TMPOUT_UUNIQ"
  sort "$input" | uniq -u > "$TMPOUT_UNIQ"
  cmp "$TMPOUT_UUNIQ" "$TMPOUT_UNIQ"
  checkeq $? 0
  rm "$TMPOUT_UUNIQ" "$TMPOUT_UNIQ"
done

TEMPIN_RAND=$(mktemp /tmp/"${TMPFILEBASE}-in-rand.XXXXXX")
awk -v seed=123 -v nuniqlines=1000 -v nlines=1000 -v minlen=0 -v maxlen=100 -f randlines.awk > "$TEMPIN_RAND"

echo "compare 'uuniq | sort' output to 'sort | uniq' with random input"
./uuniq "$TEMPIN_RAND" | sort > "$TMPOUT_UUNIQ"
sort "$TEMPIN_RAND" | uniq > "$TMPOUT_UNIQ"
cmp "$TMPOUT_UUNIQ" "$TMPOUT_UNIQ"
checkeq $? 0
rm "$TMPOUT_UUNIQ" "$TMPOUT_UNIQ"

echo "compare 'uuniq -d | sort' output to 'sort | uniq -d' with random input"
./uuniq -d "$TEMPIN_RAND" | sort > "$TMPOUT_UUNIQ"
sort "$TEMPIN_RAND" | uniq -d > "$TMPOUT_UNIQ"
cmp "$TMPOUT_UUNIQ" "$TMPOUT_UNIQ"
checkeq $? 0
rm "$TMPOUT_UUNIQ" "$TMPOUT_UNIQ"

echo "compare 'uuniq -u | sort' output to 'sort | uniq -u' with random input"
./uuniq -u "$TEMPIN_RAND" | sort > "$TMPOUT_UUNIQ"
sort "$TEMPIN_RAND" | uniq -u > "$TMPOUT_UNIQ"
cmp "$TMPOUT_UUNIQ" "$TMPOUT_UNIQ"
checkeq $? 0
rm "$TMPOUT_UUNIQ" "$TMPOUT_UNIQ"

rm "$TEMPIN_RAND"

if [ $ERRORS -gt 0 ]
then
    echo "$ERRORS failures"
fi
exit $ERRORS
